The goal of this challenge is that the participants concern themselves with a second order SQLi.
Right at the beginning when entering the website, the user is prompted to login.
Soon they will notice, that they need register an account to do this.
When the challengee registers, he creates an entry in the database containing a username and a password and is provided with a secret.
Every single query is protected by prepared statements.
However this is already the state in which participants should enter the forged payload as a username.
Once logged in, the user is granted access to a change password page. When submitting the new password correctly, in the background there will be a vulnerable query using the secret and username to retrieve the old stored password for that specific username-secret combination (That old password is later used for comparison reasons).
Particularly this select query is not protected by prepared statements. 
To prevent an injection by the sessionID cookie, the value is checked beforehand to be a numeric.
To also prevent direct harm against the database, the query may not include critical words like "drop","alter" etc. as well as "admin".
This way the participant is forced to use the MySQL concat() function.
Unfortunately this also leads to the ability to execute queries including "alter","drop",...

To further minimize a database or webserver failure, all docker container roughly reset  every 15 minutes.
If only service crashes, all docker container will reset.
If there are more than 100000 database entries, the database will be flushed.

The flag is hidden in the users table as the secret of the admin account.



The provided source code (see public folder) with its comments should lead to the vulnerability. The challengee then has to trace back, where the username variable could be manipulated. Finally the person has to forge a correct payload.


Payload solution: test' UNION SELECT * FROM users WHERE username=concat('ad','min'); #
